import {asyncHandler} from '../utils/asyncHandler.js'
import { User} from "../models/user.model.js"

const registerUser = asyncHandler( async (req, res) => {
    // get user details from frontend
    // validation - not empty
    // check if user already exists: username, email
    // check for images, check for avatar
    // upload them to cloudinary, avatar
    // create user object - create entry in db
    // remove password and refresh token field from response
    // check for user creation
    // return res

    const {fullName, email, username, password } = req.body
    //console.log("email: ", email);

    if (
        [fullName, email, username, password].some((field) => field?.trim() === "")                                     /* ‡πÉ‡∏ä‡πâ Array.prototype.some() ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ô array ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÉ‡∏î‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ó‡∏≥‡πÉ‡∏´‡πâ field (callback) return true ‚Üí ‡∏à‡∏∞ return true ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î */
    )    {
        throw new ApiError(400, "All fields are required")
    }
    /* --- ‚úÖ ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô  ---
        üìå [fullName, email, username, password]    : ‡∏™‡∏£‡πâ‡∏≤‡∏á array ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å destructuring ‡∏Ç‡∏≠‡∏á req.body  
        üìå .some((field) => field?.trim() === "")   : ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏ô loop ‡πÅ‡∏ö‡∏ö callback
            üëâ field = ‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ element ‡πÉ‡∏ô array
            üëâ field?.trim() = ‡πÄ‡∏≠‡∏≤‡∏Ñ‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏°‡∏≤ trim ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á (‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏ô‡πâ‡∏≤/‡∏´‡∏•‡∏±‡∏á) ‚úÖ ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ ?. ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô error ‡∏ñ‡πâ‡∏≤ field = undefined/null
            üëâ ‡∏ñ‡πâ‡∏≤ trim ‡πÅ‡∏•‡πâ‡∏ß === "" ‚Üí ‡πÅ‡∏õ‡∏•‡∏ß‡πà‡∏≤ "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á ‡πÜ" ‚Üí true
    */ 
    
    const existedUser = await User.findOne({
        $or: [{ username }, { email }]                                                                                  /* ‡πÉ‡∏ä‡πâ $or ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ document ‡∏ó‡∏µ‡πà username ‡∏´‡∏£‡∏∑‡∏≠ email ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤ */
    })

    if (existedUser) {
        throw new ApiError(409, "User with email or username already exists")
    }

    const avatarLocalPath = req.files?.avatar[0]?.path;
    /* --- ‚úÖ ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô  ---
        üìå ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°
            üëâ ‡∏î‡∏∂‡∏á "path" ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå avatar ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤‡∏à‡∏≤‡∏Å req.files ‡πÇ‡∏î‡∏¢:
            üëâ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô error ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ files, avatar, ‡∏´‡∏£‡∏∑‡∏≠ avatar[0]
            üëâ ‡πÉ‡∏ä‡πâ Optional Chaining (?.) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á TypeError
        üìå req.files
            üëâ req.files ‡∏Ñ‡∏∑‡∏≠ object ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å middleware ‡πÄ‡∏ä‡πà‡∏ô Multer ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏ö‡∏ö multipart/form-data (‡πÄ‡∏ä‡πà‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå)
            üëâ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô req.files:
                    {
                        avatar: [
                            {
                            fieldname: 'avatar',
                            originalname: 'meow.jpg',
                            encoding: '7bit',
                            mimetype: 'image/jpeg',
                            destination: 'uploads/',
                            filename: 'meow-123.jpg',
                            path: 'uploads/meow-123.jpg',
                            size: 90024
                            }
                        ]
                    }
        üìå req.files?.avatar
            üëâ ‡πÉ‡∏ä‡πâ Optional Chaining (?.) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô error ‡∏´‡∏≤‡∏Å req.files ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà (‡πÄ‡∏ä‡πà‡∏ô undefined)
            üëâ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‚Üí ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô array ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå (‡πÄ‡∏û‡∏£‡∏≤‡∏∞ avatar ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠ single())
        üìå req.files?.avatar[0]
            üëâ ‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å (index 0) ‡∏Ç‡∏≠‡∏á key avatar
            üëâ ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå ‚Üí ‡∏Ñ‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô undefined ‚Üí ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏î crash ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ ?. ‡∏Ñ‡∏±‡πà‡∏ô‡πÑ‡∏ß‡πâ
        üìå req.files?.avatar[0]?.path
            üëâ ‡∏î‡∏∂‡∏á path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î (‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å)
            üëâ ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ path ‡∏Ñ‡∏∑‡∏≠ ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á (local path) ‡πÄ‡∏ä‡πà‡∏ô:
                            uploads/meow-123.jpg
        üìå ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
                            const avatarLocalPath = req.files?.avatar[0]?.path;
            üëâ ‡∏ñ‡πâ‡∏≤ req.files ‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡πà‡∏≤ avatar
            üëâ ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏£‡∏Å‡∏≠‡∏¢‡∏π‡πà
            üëâ ‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏≤‡∏Ñ‡πà‡∏≤ path ‡∏°‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô avatarLocalPath
            üëâ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà ‚Üí avatarLocalPath = undefined (‡πÑ‡∏°‡πà throw error)
        üìå ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ?. ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏¢‡∏≤‡∏ß‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ
                            let avatarLocalPath;
                            if (req.files && req.files.avatar && req.files.avatar.length > 0) {
                                avatarLocalPath = req.files.avatar[0].path;
                            }
            üëâ ‡∏™‡∏£‡∏∏‡∏õ: ?. ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏¢‡∏≠‡∏∞‡∏°‡∏≤‡∏Å
    */

    let coverImageLocalPath;
    if (req.files && Array.isArray(req.files.coverImage) && req.files.coverImage.length > 0) {
        coverImageLocalPath = req.files.coverImage[0].path                                                              /* ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏£‡∏Å‡∏à‡∏≤‡∏Å array ‡∏î‡∏∂‡∏á path ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ö‡∏ô server local (‡πÄ‡∏ä‡πà‡∏ô uploads/my-cover-xyz.jpg) ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ coverImageLocalPath ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ upload cloud ‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ */ 
        /* --- ‚úÖ ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô  ---
            üìå req.files: ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ object req.files ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏´‡∏° (‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô undefined ‡∏´‡∏£‡∏∑‡∏≠ null) ‡∏ñ‡πâ‡∏≤ req.files ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÅ‡∏ô‡∏ö‡∏°‡∏≤‡πÄ‡∏•‡∏¢ (‡πÄ‡∏ä‡πà‡∏ô frontend ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå) ‚Üí ‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏∞‡πÑ‡∏°‡πà crash
            üìå Array.isArray(req.files.coverImage): ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ req.files.coverImage ‡πÄ‡∏õ‡πá‡∏ô array ‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏£‡∏≤‡∏∞ Multer ‡∏≠‡∏≤‡∏à‡πÉ‡∏´‡πâ req.files.coverImage ‡πÄ‡∏õ‡πá‡∏ô undefined ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ upload.fields([{ name: 'coverImage', maxCount: 1 }]) ‚Üí ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô array ‡πÄ‡∏™‡∏°‡∏≠
            üìå req.files.coverImage.length > 0: ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡πÉ‡∏ô array ‡∏ô‡∏±‡πâ‡∏ô ‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡πÑ‡∏ü‡∏•‡πå‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà coverImage: [] (‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ä‡∏∑‡πà‡∏≠ field ‡∏°‡∏≤‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏•‡∏¢)
        */      
    }
    
    if (!avatarLocalPath) {
        throw new ApiError(400, "Avatar file is required")
    }

    const avatar = await uploadOnCloudinary(avatarLocalPath)
    const coverImage = await uploadOnCloudinary(coverImageLocalPath)

    if (!avatar) {
        throw new ApiError(400, "Avatar file is required")
    }
   
    const user = await User.create({
        fullName,
        avatar: avatar.url,
        coverImage: coverImage?.url || "",
        email, 
        password,
        username: username.toLowerCase()
    })

    const createdUser = await User.findById(user._id).select(
        "-password -refreshToken"
    )

    if (!createdUser) {
        throw new ApiError(500, "Something went wrong while registering the user")
    }

    return res.status(201).json(
        new ApiResponse(200, createdUser, "User registered Successfully")
    )

})

export {registerUser}